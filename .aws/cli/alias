# vim: ft=sh
[toplevel]

whoami = sts get-caller-identity

get-region = !:;python3 -c 'import botocore.session; print(botocore.session.Session().get_config_variable("region"))'

.prettify = !:;column -t -s$'\t' | if [ -t 1 ]; then sed $'n;s/.*/\x1b[38;2;255;190;190m&\x1b[0m/;'; else cat; fi

.which = !:;f() { #
    python3 -c '
    import sys
    import awscli.alias
    aliases = awscli.alias.AliasLoader().get_aliases()
    print(aliases[sys.argv[1]])
    ' "$@"; }; f

.ec2s = !:;f() { # ec2 describe-instances --instance-ids
    if (( $# )); then
        aws ec2 describe-instances --instance-ids "$@"
    else
        aws ec2 describe-instances \
            | jq -r '[.Reservations[].Instances[]] | sort_by(.LaunchTime)[] | [.InstanceId, ((.Tags//[])[]|select(.Key=="Name").Value)//"", .LaunchTime, .PlatformDetails, .State.Name, .InstanceType, .Placement.AvailabilityZone, .PrivateIpAddress, .KeyName] | @tsv' \
            | aws .prettify
    fi; }; f

.enis = !:;f() { # ec2 describe-network-interfaces
    aws ec2 describe-network-interfaces "$@" \
        | jq -r '.NetworkInterfaces[] | [.NetworkInterfaceId, .Attachment.InstanceId, .AvailabilityZone, ([.PrivateIpAddresses[].PrivateIpAddress]|join(",")), .Association.PublicIp, (if .Description != "" then .Description else .Groups[0].GroupName end)] | @tsv' \
        | aws .prettify; }; f

.volumes = !:;f() { # ec2 describe-volumes
    aws ec2 describe-volumes "$@" \
        | jq -r '.Volumes | sort_by(.CreateTime)[] | [.VolumeId, ((.Tags//[])[]|select(.Key=="Name").Value)//"", .CreateTime, (.Size|tostring+"G"), .State, .AvailabilityZone, .VolumeType, .Attachments[0].InstanceId, .Attachments[0].Device] | @tsv' \
        | aws .prettify; }; f

.snapshots = !:;f() { # ec2 describe-snapshots --owner-ids self
    aws ec2 describe-snapshots --owner-ids self "$@" \
        | jq -r '.Snapshots | sort_by(.StartTime)[] | [.SnapshotId, ((.Tags//[])[]|select(.Key=="Name").Value)//"", .StartTime, (.VolumeSize|tostring+"G"), .State, .Progress, .VolumeId] | @tsv' \
        | aws .prettify; }; f

.stacks = !:;f() { # cloudformation describe-stacks --stack-name
    if (( $# )); then
        (aws cloudformation describe-stacks --stack-name "$@" && aws cloudformation list-stack-resources --stack-name "$@") \
            | jq -sr '([(.[0].Stacks[].Parameters//[])[]|["Parameter", .ParameterKey,.ParameterValue]] + [(.[1].StackResourceSummaries//[])[]|["Resource", .LogicalResourceId, .PhysicalResourceId, .ResourceType, .ResourceStatus]] + [(.[0].Stacks[].Outputs//[])[]|["Output", .OutputKey,.OutputValue]])[] | join("\t")'
    else
        aws cloudformation list-stacks \
        | jq -r '.StackSummaries | sort_by(.LastUpdatedTime)[] | select(.StackStatus!="DELETE_COMPLETE") | [.StackName, .StackStatus, .CreationTime, .LastUpdatedTime] | @tsv'
    fi | aws .prettify; }; f

.prettify-stack-events = !:;f() {
    stdbuf -oL awk -vstack_name="$1" '
        $3~/COMPLETE/ {printf "\x1b[92m"}
        $3~/IN_PROGRESS/ {printf "\x1b[93m"}
        $3~/ROLLBACK/ {printf "\x1b[95m"}
        $3~/FAILED/ {printf "\x1b[91m"}
        $3~/ROLLBACK_IN_PROGRESS/ {printf "\x1b[91m"}
        $3~/ROLLBACK_FAILED/ {printf "\x1b[31m"}
        $2==stack_name {printf "\x1b[1m"}
        {print $0"\x1b[0m"}
        $2==stack_name && $3~/FAILED$|COMPLETE$/ {print "\x1b[9m\x1b[K\x1b[0m"}
        { fflush() }' \
    | sed -r 's/^(\S*m)(\S*\s+)/\2\1/'; }; f

.stack-exports = !:;f() { # cloudformation list-exports
    aws cloudformation list-exports "$@" \
        | jq -r '.Exports[] | [.Name, .Value, (.ExportingStackId|split("/")[1])] | @tsv' \
        | aws .prettify; }; f

.stack-events = !:;f() { # cloudformation describe-stack-events --stack-name
    set -o pipefail
    aws cloudformation describe-stack-events --stack-name "$@" \
        | jq -r '.StackEvents | sort_by(.Timestamp)[] | [.Timestamp, .LogicalResourceId, .ResourceStatus, .ResourceStatusReason] | @tsv' \
        | column -t -s$'\t' | aws .prettify-stack-events "$@"; }; f

.watch-stack = !:;f() { # cloudformation describe-stack-events --stack-name
    set -o pipefail
    args=( "$@" )
    events_from() {
        aws cloudformation describe-stack-events --stack-name "${args[@]}" \
        | jq --arg date "$1" -r '.StackEvents | sort_by(.Timestamp)[] | select(.Timestamp>$date) | [.Timestamp, .LogicalResourceId, .ResourceStatus, .ResourceStatusReason] | @tsv'
    }

    while true; do
        if ! events="$(events_from "${last_date:-}")"; then break; fi
        if [ -n "$events" ]; then
            last_date="$(<<<"$events" tail -n1 | cut -f1)"
            echo "$events" | column -t -s$'\t'
        fi
        sleep 10
    done | aws .prettify-stack-events "$@"; }; f

.asgs = !:;f() { # autoscaling describe-auto-scaling-groups
    aws autoscaling describe-auto-scaling-groups "$@" \
        | jq -r '.AutoScalingGroups | sort_by(.CreatedTime)[] | [.AutoScalingGroupName, .MinSize, .MaxSize, .HealthCheckType, ([.Instances[]|.InstanceId+"="+.HealthStatus]|join(","))] | @tsv' \
        | aws .prettify; }; f

.asg-activity = !:;f() { # autoscaling describe-scaling-activities --auto-scaling-group-name
    aws autoscaling describe-scaling-activities --auto-scaling-group-name "$@" \
        | jq -r '.Activities | sort_by(.StartTime)[] | [.StartTime, .Description, .Cause] | @tsv' \
        | aws .prettify; }; f

.elbs = !:;f() { # elb describe-load-balancers
    aws elb describe-load-balancers "$@" \
        | jq -r '.LoadBalancerDescriptions | sort_by(.CreatedTime)[] | [.LoadBalancerName, .Scheme, ([.ListenerDescriptions[].Listener | (.Protocol+":"+(.LoadBalancerPort|tostring)+"-"+.InstanceProtocol+":"+(.InstancePort|tostring))]|join(",")), .HealthCheck.Target, .DNSName] | @tsv' \
        | aws .prettify; }; f

.albs = !:;f() { # elbv2 describe-load-balancers
    aws elbv2 describe-load-balancers "$@" \
        | jq -r '.LoadBalancers | sort_by(.CreatedTime)[] | [.LoadBalancerName, .Scheme, .Type, .DNSName] | @tsv' \
        | aws .prettify; }; f

.ami = !:;f() { # ec2 describe-images --owner self --image-id
    aws ec2 describe-images --owner self ${1+--image-id "$1"} \
        | jq -r '.Images | sort_by(.CreationDate)[] | [.ImageId, .CreationDate, .VirtualizationType, .Name, .Description] | @tsv' \
        | aws .prettify; }; f

.rds = !:;f() { # rds describe-db-instances
    aws rds describe-db-instances "$@" \
        | jq -r '.DBInstances | sort_by(.InstanceCreateTime)[] | [.DBInstanceIdentifier, .InstanceCreateTime, (.AllocatedStorage|tostring+"G"), (.Engine+" "+.EngineVersion), (if .MultiAZ then "multi-az" else "" end), (.Endpoint.Address+":"+(.Endpoint.Port|tostring))] | @tsv' \
        | aws .prettify; }; f

.efs = !:;f() { # efs describe-file-systems
    aws efs describe-file-systems "$@" \
        | jq -r '.FileSystems | sort_by(.CreationTime)[] | [.FileSystemId, .Name, (.CreationTime|todate), (.SizeInBytes.Value/1000000|floor|tostring+"M"), .ThroughputMode, (.ProvisionedThroughputInMibps|tostring+"MiB/s")] | @tsv' \
        | aws .prettify; }; f

.cloudfronts = !:;f() { # cloudfront list-distributions
    aws cloudfront list-distributions "$@" \
        | jq -r '.DistributionList.Items[] | [.Id, (.Comment|gsub("\\s"; "")), .Status, (.Aliases.Items|join(",")), .ViewerCertificate.Certificate] | @tsv' \
        | aws .prettify; }; f

.elasticaches = !:;f() { # elasticaches describe-cache-clusters --show-cache-node-info
    export replication="$(aws elasticache describe-replication-groups)" && \
    aws elasticache describe-cache-clusters --show-cache-node-info "$@" \
        | jq -r '.CacheClusters | sort_by(.CacheClusterCreateTime)[] | [.CacheClusterId, (.Engine+" "+.EngineVersion), .CacheNodeType, .CacheClusterStatus, .NumCacheNodes, (if .ConfigurationEndpoint then .ConfigurationEndpoint elif .ReplicationGroupId then (.ReplicationGroupId as $groupid | env.replication | fromjson.ReplicationGroups[]|select(.ReplicationGroupId==$groupid).NodeGroups[0].PrimaryEndpoint) else .CacheNodes[0].Endpoint end | (.Address+":"+(.Port|tostring)))] | @tsv' \
        | aws .prettify; }; f

.elasticache-groups = !:;f() { # elasticache describe-replication-groups
    aws elasticache describe-replication-groups "$@" \
        | jq -r '.ReplicationGroups[] | [.ReplicationGroupId, (.Engine+" "+.EngineVersion), .CacheNodeType, .CacheClusterStatus, .NumCacheNodes, (if .ConfigurationEndpoint then .ConfigurationEndpoint.Address+":"+(.ConfigurationEndpoint.Port|tostring) else "" end)] | @tsv' \
        | aws .prettify; }; f

.vpcs = !:;f() { # ec2 describe-vpcs
    aws ec2 describe-vpcs "$@" \
        | jq -r '.Vpcs[] | [.VpcId, .CidrBlock, ((.Tags//[])[]|select(.Key=="Name").Value)//""] | @tsv' \
        | aws .prettify; }; f

.subnets = !:;f() { # ec2 describe-subnets
    aws ec2 describe-subnets "$@" \
        | jq -r '.Subnets[] | [.SubnetId, .CidrBlock, .VpcId, .AvailabilityZone, ((.Tags//[])[]|select(.Key=="Name").Value)//""] | @tsv' \
        | aws .prettify; }; f

.dns-records = !:;f() {
    aws route53 list-hosted-zones \
    | jq -r '.HostedZones[].Id | split("/")[-1]' \
    | xargs -r -P$(nproc) -n1 aws route53 list-resource-record-sets --hosted-zone-id \
    | jq -r '.ResourceRecordSets[] | [.Name, env.id, .Type, ([(.ResourceRecords//[])[].Value, .AliasTarget.DNSName//empty]|join(","))] | @tsv' \
    | aws .prettify; }; f

.sqs = !:;f() {
    aws sqs list-queues \
    | jq -r '.QueueUrls[]' \
    | xargs -r -P$(nproc) -n1 aws sqs get-queue-attributes --attribute-names ApproximateNumberOfMessages ApproximateNumberOfMessagesNotVisible QueueArn --queue-url \
    | jq -r '.Attributes | [(.QueueArn|split(":")[-1]), "total=\(.ApproximateNumberOfMessages)", "inflight=\(.ApproximateNumberOfMessagesNotVisible)"] | @tsv' \
    | .pretty-rows; }; f

.lambdas = !:;f() { # lambda list-functions
    aws lambda list-functions "$@" \
        | jq -r '.Functions | sort_by(.LastModified)[] | [.FunctionName, .Runtime, (.MemorySize|tostring+"M"), .Description] | @tsv' \
        | aws .prettify; }; f

.get-lambda-code = !:;f() { # lambda get-function --function-name
    url="$(aws lambda get-function --function-name "$1" | jq -r .Code.Location)"
    trap 'rm -f "$zipfile"' EXIT
    zipfile="$(mktemp)"
    curl "$url" -o "$zipfile"
    mkdir -p "${2:-$1}"
    unzip -d "$1" "$zipfile"
    }; f

.mfa-user = !:;f() {
    mfa_serial="$(aws sts get-caller-identity --query Arn --output text | sed 's/:user/:mfa/')"
    read -s -p "Enter MFA code for $mfa_serial: " mfa
    echo
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
    aws sts get-session-token --serial-number "$mfa_serial" --token-code "$mfa" \
        | jq '[.Credentials | to_entries[] | "AWS"+(.key | gsub( "(?<a>[A-Z])"; "_"+.a) | ascii_upcase)+"="+.value] | join(" ") | "export "+.' -r
    }; f

.assume-role = !:;f() {
    role="$1"
    name="$(echo -n "$role" | cut -d/ -f2- | tr -c '[:alnum:]=,.@-' _)-$(date +%s)"
    aws sts assume-role --role-arn "$role" --role-session-name "$name" \
        | jq '[.Credentials | to_entries[] | "AWS"+(.key | gsub( "(?<a>[A-Z])"; "_"+.a) | ascii_upcase)+"="+.value] | join(" ") | "export "+.' -r
    }; f

.pretty-cloudtrail = !:;f() { # cloudtrail lookup-events
    attrs=( --lookup-attributes )
    args=()
    for i in "$@"; do
        if [[ "$i" == *=* ]]; then
            attrs+=( "AttributeKey=${i%%=*},AttributeValue=${i#*=}" )
        else
            args+=( "$i" )
        fi
    done
    aws cloudtrail lookup-events "${args[@]}" "${attrs[@]}" \
        | jq '.Events | sort_by(.EventTime)[].CloudTrailEvent | fromjson | [.eventTime, .userIdentity.sessionContext.sessionIssuer.userName, .eventName, .errorMessage] | join("\t")' -r \
        | aws .prettify; }; f

.call-lambda = !:;f() { # lambda invoke --function-name
    payload="$(jq -nc "$2 // {}")" && \
    aws lambda invoke --function-name "$1" --log-type Tail --payload "$payload" /dev/stdout \
        | jq -s '.[1].LogResult |= (@base64d | split("\n|\r" ; "g") )'
    }; f

.ec2-dev-console = !:;f() { # ec2 get-console-output --instance-id
    aws ec2 get-console-output --instance-id "$@" | jq -re .Output
    }; f
.ec2-user-data = !:;f() { # ec2 get-launch-template-data --instance-id
    aws ec2 get-launch-template-data --instance-id "$@" | jq -r '.LaunchTemplateData.UserData | @base64d'
    }; f
.ec2-screenshot = !:;f() { # ec2 get-console-screenshot --instance-id
    set -eu -o pipefail
    aws ec2 get-console-screenshot --query ImageData --output text --instance-id "$@" | base64 -d \
    | { [ -t 1 ] && unset LD_LIBRARY_PATH && imv - || cat; }
    }; f

.pretty-health = !:;f() {
    AWS_DEFAULT_REGION=us-east-1 aws health describe-events --query 'events[].[arn]' --output text \
    | while IFS= read -r arn; do
        set -e
        AWS_DEFAULT_REGION=us-east-1 aws health describe-event-details --event-arn "$arn"
    done \
    | jq -r '.successfulSet[] | "\u001b[1m\([.event.eventTypeCode, .event.statusCode, "in", .event.region, (.event.startTime|todate), "-", (.event.endTime|todate)] | join(" "))\u001b[0m\n\(.eventDescription.latestDescription)\n\u001b[9m\u001b[K\u001b[0m"'
    }; f

.vpc-endpoints = !:;f() { # ec2 describe-vpc-endpoints
    aws ec2 describe-vpc-endpoints "$@" \
    | jq -r '.VpcEndpoints[] | [.ServiceName, .State, .VpcEndpointType, .VpcId] | @tsv' \
    | aws .prettify; }; f

.iam-profiles = !:;f() { # iam list-instance-profiles
    aws iam list-instance-profiles "$@" \
    | jq -r '.InstanceProfiles[] | [.InstanceProfileName]+[.Roles[].RoleName] | @tsv' \
    | aws .prettify; }; f

.iam-roles = !:;f() { # iam list-attached-role-policies --role-name
    if (( $# )); then
        aws iam list-attached-role-policies --role-name="$@" | jq -r '.AttachedPolicies[] | [.PolicyArn, .PolicyName] | @tsv' \
        | while read -r arn name; do
            version="$(aws iam get-policy --policy-arn="$arn" --query Policy.DefaultVersionId --output text)"
            aws iam get-policy-version --policy-arn="$arn" --version-id="$version" \
            | name="$name" jq --sort-keys '{(env.name): .PolicyVersion.Document.Statement}'
        done | json2yaml
        aws iam list-role-policies --role-name="$@" | jq -r '.PolicyNames[]' \
        | while read -r name; do
            aws iam get-role-policy --role-name="$@" --policy-name="$name" \
            | name="$name" jq --sort-keys '{(env.name): .PolicyDocument.Statement}'
        done | json2yaml
    else
        aws iam list-roles \
        | jq -r '.Roles[] | [.RoleName, .Description] | @tsv' \
        | aws .prettify;
    fi; }; f

.alarms = !:;f() {
    [ -t 1 ] && tty=true || tty=false
    aws cloudwatch describe-alarms \
    | if [ "$1" = -v ]; then
        jq --argjson tty "$tty" -r '
        .MetricAlarms[]
            | . as $alarm
            | (if $tty then "\u001b[\({OK: 32, ALARM: 31}[.StateValue] // 34)m" else "" end) as $colour
            | (if $tty then "\u001b[0m" else "" end) as $reset
            | ({
                GreaterThanOrEqualToThreshold: ">=",
                GreaterThanThreshold: ">",
                LessThanThreshold: "<",
                LessThanOrEqualToThreshold: "<=",
            }[.ComparisonOperator] // "is \(.ComparisonOperator)") as $comparison
            | (if .EvaluationPeriods>1 then "for \(.DatapointsToAlarm) of \(.EvaluationPeriods) times" else "" end) as $times
            | [
                "\($colour)\(.AlarmName)\($reset)",
                "\($colour)\(.StateValue)\($reset) as of \(.StateUpdatedTimestamp)",
                (.AlarmDescription//"" | gsub("\n"; " ")),
                if .Metrics then
                    .Metrics[] | (
                        (
                            select(.ReturnData != false).Expression // empty
                            | "\(.) \($comparison) \($alarm.Threshold) \($times)", "  where:"
                        ),
                        (
                            select(.ReturnData == false)
                            | "    \(.Id) = " + (.Expression //
                            .MetricStat | "\(.Stat) of \(.Metric.Namespace) \(.Metric.MetricName) over \(.Period)s \(.Unit//"")")
                        )
                    )
                else
                    "\(.Statistic) of \(.Namespace) \(.MetricName) over \(.Period)s \($comparison) \(.Threshold) \(.Unit//"") \($times)"
                end,
                if .OKActions|length > 0 then "ok: \(.OKActions|join(" , "))" else empty end,
                if .AlarmActions|length > 0 then "alarm: \(.AlarmActions|join(" , "))" else empty end,
                if .InsufficientDataActions|length > 0 then "nodata: \(.InsufficientDataActions|join(" , "))" else empty end
            ] | @tsv
        ' | sed 's/$/\v/; s/\t/\v\r\t/g'
    else
        jq --argjson tty "$tty" -r '
        .MetricAlarms[]
            | (if $tty then "\u001b[\({OK: 32, ALARM: 31}[.StateValue] // 34)m" else "" end) as $colour
            | (if $tty then "\u001b[0m" else "" end) as $reset
            | ({
                GreaterThanOrEqualToThreshold: ">=",
                GreaterThanThreshold: ">",
                LessThanThreshold: "<",
                LessThanOrEqualToThreshold: "<=",
            }[.ComparisonOperator] // "is \(.ComparisonOperator)") as $comparison
            | [
                "\($colour)\(.AlarmName)\($reset)",
                "\($colour)\(.StateValue)\($reset)",
                if .Metrics then
                    .Metrics[] | select(.ReturnData != false).Expression // empty
                else
                    "\(.Statistic) \(.MetricName) \($comparison) \(.Threshold) \(if .Unit then .Unit+" " else "" end)for \(.Period)s"
                end
            ] | @tsv
        ' | column -t -s$'\t'
    fi; }; f

.sg = !:;f() { # ec2 run-instances --security-group-ids
    if (( $# )); then
        aws ec2 describe-security-groups \
        | jq -r --arg name "$1" '
        .SecurityGroups[]
            | select(.GroupName==$name or .GroupId==$name)
            | .IpPermissions[].type = "ingress"
            | .IpPermissionsEgress[].type = "egress"
            | (.IpPermissions + .IpPermissionsEgress)[]
                | .FromPort //= 1
                | .ToPort //= 65535
                | .port = if .FromPort == .ToPort then .FromPort else "\(.FromPort)-\(.ToPort)" end
                | .proto = if .IpProtocol == "-1" then "all" else .IpProtocol end
                | [.type, .proto, .port] as $rule
                | [.IpRanges[] | $rule + [.CidrIp, .Description]] + [.UserIdGroupPairs[] | $rule + [.GroupId, .Description]]
            | .[] | @tsv
        '
    else
        aws ec2 describe-security-groups \
        | jq -r '.SecurityGroups[] | [.GroupId, .GroupName, .VpcId, .Description] | @tsv'
    fi | aws .prettify; }; f

.alarm-image = !:;f() { # cloudwatch describe-alarms --alarm-names
    set -eu -o pipefail
    unset start end period stat
    alarm="$1" && shift
    (( $# )) && export "$@"

    if [ -n "${start-}" ]; then
        start="$(date -d "$start" --iso-8601=seconds)"
    fi
    if [ -n "${end-}" ]; then
        end="$(date -d "$end" --iso-8601=seconds)"
    fi

    ipc="$(if [ -n "$WAYLAND_DISPLAY" ]; then echo swaymsg; else echo i3-msg; fi)"
    read width height <<<"$("$ipc" -t get_workspaces | jq -r '.[]|select(.focused).rect | [.width, .height] | @tsv')"
    export width height

    data="$(
        aws cloudwatch describe-alarms --alarm-names "$alarm" \
        | jq -c '
        .MetricAlarms[0]
            | . as $alarm
            | if .Metrics then {
                metrics: (.Metrics | map(
                    [., {
                        id: .Id,
                        label: (.Label // .Id),
                    }]
                    | if .[0].Expression then
                        [{expression: .[0].Expression} * .[1]]
                    else
                        (.[0].MetricStat.Metric | [.Namespace, .MetricName] + (.Dimensions | map([.Name, .Value]) | flatten))
                        + [.[1] * {
                            period: .[0].MetricStat.Period,
                            stat: .[0].MetricStat.Stat,
                        }]
                    end
                )),
            } else {
                metrics: [[.Namespace, .MetricName] + (.Dimensions | map([.Name, .Value]) | flatten)],
                stat: (env.stat // .Statistic),
                period: (env.period // .Period | tonumber),
            } end
            | . * {
                start: (env.start //
                    (now - (
                        ((env.period // $alarm.Period // ($alarm.Metrics | map(.MetricStat.Period) | max)) | tonumber)
                        * $alarm.EvaluationPeriods * 4
                    ) | todate)
                ),
                end: env.end,
                title: $alarm.AlarmName,
                width: (env.width | tonumber/2 | round),
                height: (env.height | tonumber/2 | round),
                annotations: {
                    horizontal: [{
                        color: "#ff0000",
                        value: $alarm.Threshold,
                        fill: (
                            if $alarm.ComparisonOperator|startswith("Greater") then
                                "above"
                            elif $alarm.ComparisonOperator|startswith("Less") then
                                "below"
                            else
                                "none"
                            end
                        ),
                    }],
                },
            }
            + if env.min then {yAxis: {left: {min: (env.min|tonumber)}}} else {} end
            + if env.max then {yAxis: {left: {max: (env.max|tonumber)}}} else {} end
        '
    )"
    aws cloudwatch get-metric-widget-image --metric-widget "$data" \
    | jq -r .MetricWidgetImage | base64 -d \
    | { [ -t 1 ] && unset LD_LIBRARY_PATH && imv - || cat; }
    }; f

.get-metrics = !:;f() {
    set -eu -o pipefail
    unset start end period namespace metric expression stat
    (( $# )) && export "$@"
    eval "dimensions=( $(env -i "$@" env -u namespace -u metric -u expression -u stat -u period -u start -u end -u search | xargs -d\\n printf %q\\n) )"

    start="${start:-5 min ago}"
    end="${end:-now}"
    if [ -z "${expression-}" ]; then
        namespace="${namespace?no namespace given}"
        metric="${metric?no metric given}"
        period="${period:-60}"
        stat="${stat?no stat given}"

        if [ "${search-}" != '' -a "${search-}" != 0 ]; then
            expression="SEARCH('{$namespace,$(printf %s\\n "${dimensions[*]}" | cut -d= -f1 | tr \\n , | sed 's/,$//')} MetricName=\"$metric\" ${dimensions[*]}', '$stat', $period)"
        fi
    fi
    input="$(env -i "${dimensions[@]}" jq -nc \
        --arg period "${period-}" \
        --arg stat "${stat-}" \
        --arg namespace "${namespace-}" \
        --arg metric "${metric-}" \
        --arg expression "${expression-}" \
        --arg search "${search-}" \
    $'{
        MetricDataQueries: [
            if $expression != "" then
                {Id: "metric", Expression: $expression}
            else
                {Id: "metric", MetricStat: {
                    Period: ($period|tonumber),
                    Stat: $stat,
                    Metric: {
                        Namespace: $namespace,
                        MetricName: $metric,
                        Dimensions: (env|to_entries|map({Name: .key, Value: .value})),
                    }
                }}
            end
        ]
    }')"

    aws cloudwatch get-metric-data --cli-input-json "$input" --start-time="$(date -d "$start" +%s)" --end-time="$(date -d "$end" +%s)" \
    | jq -r '["datetime", "label", "value"], (.MetricDataResults[] | . as $result | [.Timestamps, (.Values|map($result.Label)), .Values] | transpose[]) | @tsv'
    }; f

.get-metrics-image = !:;f() {
    set -eu -o pipefail
    unset start end period namespace metric expression stat
    (( $# )) && export "$@"
    eval "dimensions=( $(env -i "$@" env -u namespace -u metric -u expression -u stat -u period -u start -u end -u search | xargs -d\\n printf %q\\n) )"
    read width height <<<"$(i3-msg -t get_workspaces | jq -r '.[]|select(.focused).rect | [.width, .height] | @tsv')"

    start="${start:-5 min ago}"
    end="${end:-now}"
    if [ -z "${expression-}" ]; then
        namespace="${namespace?no namespace given}"
        metric="${metric?no metric given}"
        period="${period:-60}"
        stat="${stat?no stat given}"

        if [ "${search-}" != '' -a "${search-}" != 0 ]; then
            expression="SEARCH('{$namespace,$(printf %s\\n "${dimensions[*]}" | cut -d= -f1 | tr \\n , | sed 's/,$//')} MetricName=\"$metric\" ${dimensions[*]}', '$stat', $period)"
        fi
    fi
    input="$(env -i "${dimensions[@]}" jq -nc \
        --arg period "${period-}" \
        --arg stat "${stat-}" \
        --arg namespace "${namespace-}" \
        --arg metric "${metric-}" \
        --arg expression "${expression-}" \
        --arg search "${search-}" \
        --arg width "$width" --arg height "$height" \
        --arg start "$(date -d "$start" --iso-8601=seconds)" --arg endtime "$(date -d "$end" --iso-8601=seconds)" \
    $'{
        start: $start,
        end: $endtime,
        width: ($width|tonumber/2|round),
        height: ($height|tonumber/2|round),
    } * if $expression != "" then
        {metrics: [[{expression: $expression}]]}
    else
        {stat: $stat, period: ($period|tonumber), metrics: [[$namespace, $metric] + [env | to_entries[] | .key, .value]]}
    end
    ')"

    aws cloudwatch get-metric-widget-image --metric-widget "$input" \
    | jq -r .MetricWidgetImage | base64 -d \
    | { [ -t 1 ] && unset LD_LIBRARY_PATH && imv - || cat; }
    }; f

.stack-template = !:;f() { # cloudformation get-template --stack-name
    aws cloudformation get-template --template-stage Original --stack-name "$@" | jq -j .TemplateBody
    }; f

.stack-drift = !:;f() { # cloudformation detect-stack-drift --stack-name
    id="$(aws cloudformation detect-stack-drift --stack-name "$1" | jq -r .StackDriftDetectionId)"
    while [ "$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id "$id")" = DETECTION_IN_PROGRESS ]; do
        sleep 10
    done
    aws cloudformation describe-stack-resource-drifts --stack-name "$1" \
    | jq -r '
        .StackResourceDrifts[] | . as $data
        | .PropertyDifferences[]
        |
            [$data.StackResourceDriftStatus, $data.LogicalResourceId, .PropertyPath],
            ["", "Expected:", .ExpectedValue],
            ["", "Actual:", .ActualValue],
            ["---"]
        | @tsv
    ' | column -t -s$'\t'
    }; f

.acm-certs = acm list-certificates --includes keyTypes=RSA_1024,RSA_2048,EC_secp384r1,EC_prime256v1,EC_secp521r1,RSA_3072,RSA_4096

.stack-for = !:;f() {
    aws cloudformation describe-stack-resources --physical-resource-id "$1" | jq -re .StackResources[0].StackName \
    || aws .tags "$1" | awk '$1=="aws:cloudformation:stack-name"' | cut -f2- | grep . \
    || aws cloudformation describe-stacks --stack-name "$1" | jq -re .Stacks[].ParentId | cut -d/ -f2
    }; f

.nats = !:;f() { # ec2 describe-nat-gateways
    aws ec2 describe-nat-gateways "$@" \
    | jq -r '.NatGateways[] | [.NatGatewayId, .VpcId, ((.Tags//[])[]|select(.Key=="Name").Value)] | @tsv' \
    | aws .prettify; }; f

.tags = !:;f() {
    if [ "$2" = -f ]; then
        aws resourcegroupstaggingapi get-resources \
        | jq -r --arg name "$1" '.ResourceTagMappingList[] | select(.ResourceARN | endswith("/"+$name) or endswith(":"+$name)).Tags[] | [.Key, .Value] | @tsv'
    else
        aws whatis "$@" | jq -re '.tags | to_entries[] | [.key, .value] | @tsv'
    fi | aws .prettify; }; f

.arn = !:;f() {
    if [ "$2" = -f ]; then
        aws resourcegroupstaggingapi get-resources \
        | jq -r --arg name "$1" '.ResourceTagMappingList[] | select(.ResourceARN | endswith("/"+$name) or endswith(":"+$name)).ResourceARN'
    else
        aws whatis "$@" | jq -re .arn
    fi; }; f

.presigned_s3_put = !:;f() { # s3 ls
    python -c 'import sys, shlex, boto3; url=sys.argv[1].removeprefix("s3://"); print("curl", shlex.quote(boto3.client("s3").generate_presigned_url("put_object", Params=dict(Bucket=url.partition("/")[0], Key=url.partition("/")[2]))), "--upload-file", "...")' "$@"
    }; f

.delete-stack = !:;f() { # cloudformation delete-stack --stack-name
    if [ "$2" = -f ]; then
        aws cloudformation update-termination-protection --no-enable-termination-protection --stack-name "$1"
    fi
    aws cloudformation delete-stack --stack-name "$1" && aws cloudformation wait stack-delete-complete --stack-name "$1"
    }; f

whatis = !:;f() {
    aws configservice select-resource-config --expression "SELECT *,tags,relationships WHERE arn LIKE 'arn:aws:%/$1' OR arn LIKE 'arn:aws:%:$1';" \
    | jq '
        .Results[] | fromjson
        | .tags|=from_entries
        | .relationships |= (group_by(.relationshipName) | map({(.[0].relationshipName): map(.resourceId)}))
    '
    }; f

describe = !:;f() {
    while read -r type id; do
        aws configservice get-resource-config-history --resource-type "$type" --resource-id "$id" --limit 1 \
        | jq '.configurationItems[] | .configuration|=fromjson'
    done < <(aws whatis "$@" | jq -r '[.resourceType, .resourceId] | @tsv')
    }; f

.scrape = !:;f() {
    python ~/.aws/cli/aws-cli-completion/lib/scrape_aws_for_resource.py "$@" 2> >(sed 's/.*/\x1b[37m&\x1b[0m/' >&2) | aws .prettify
    }; f

.stack-to-script = !:;f() { # cloudformation describe-stacks --stack-name
    set -eu -o pipefail
    stack_name="$1"
    dir="$2"
    shift 2
    mkdir -p "$dir"
    aws .stack-template "$stack_name" "$@" >"$dir/stack.yaml"
    echo "Created $dir/stack.yaml" >&2
    aws cloudformation get-stack-policy --stack-name "$stack_name" | jq -r .StackPolicyBody >"$dir/stack_policy.json"

    echo "Created $dir/stack_policy.json" >&2

    stack="$(aws cloudformation describe-stacks --stack-name "$stack_name")" || return "$?"
    # params="$(<<<"$stack" jq -r '.Stacks[0] | (.Parameters//[])[] | .ParameterKey+"="+.ParameterValue | " "*8+@sh+" \\"')"
    params="$(<<<"$stack" jq -r '.Stacks[0] | (.Parameters//[] | map(select(.ParameterValue != "****")))[] | .ParameterKey+"="+.ParameterValue | " "*8+@sh+" \\"')"
    tags="$(<<<"$stack" jq -r '.Stacks[0].Tags[] | .Key+"="+.Value | " "*8+@sh+" \\"')"

    (
        echo '#!/usr/bin/env bash'
        echo
        echo 'set -eu -o pipefail'
        printf 'original_stack_name=%q\n' "$stack_name"
        echo 'stack_name="${1:?no stack name given, perhaps you want "$original_stack_name"}"'
        echo 'shift'
        echo 'cd "$(dirname "$0")"'
        echo
        echo 'aws cloudformation deploy \'
        echo '    --stack-name "$stack_name" \'
        echo '    --template-file ./stack.yaml \'
        echo '    --no-fail-on-empty-changeset \'
        echo '    --capabilities CAPABILITY_NAMED_IAM \'
        [ -n "$params" ] && { echo '    --parameter-overrides \'; echo "$params"; }
        [ -n "$tags" ]   && { echo '    --tags \'; echo "$tags"; }
        echo '    "$@"'
        echo
        echo 'if [ -s ./stack_policy.json ]; then'
        echo '    aws cloudformation set-stack-policy --stack-name "$stack_name" --stack-policy-body "file://./stack_policy.json"'
        echo 'fi'

    ) >"$dir/deploy.sh"
    chmod +x "$dir/deploy.sh"
    echo "Created $dir/deploy.sh" >&2
    }; f

.ecs-services = !:;f() {
    aws ecs list-clusters \
    | jq -re .clusterArns[] \
    | cut -d/ -f2- \
    | while read -r cluster; do
        aws ecs list-services --cluster "$cluster" | jq --arg cluster "$cluster" -re '.serviceArns[] | [., $cluster] | @tsv' | cut -d/ -f2-
    done \
    | aws .prettify
    }; f

.ecs-service-events = !:;f() { # ecs describe-services --cluster
    aws ecs describe-services --cluster "$1" --service "$2" \
    | jq -re '.services[].events | sort_by(.createdAt)[] | [(.createdAt|todate), .message] | @tsv' \
    | aws .prettify
    }; f

.s3-clear-bucket = !:;f() { # s3api head-bucket --bucket
    bucket="$1"

    aws s3api put-bucket-versioning --versioning-configuration Status=Suspended --bucket "$bucket"
    aws s3 rm --recursive s3://"$bucket" --only-show-errors

    aws s3api list-object-versions --bucket "$bucket" \
    | jq -r '((.Versions//[]) + (.DeleteMarkers//[]))[] | [.Key, .VersionId] | @tsv' \
    | python3 -c $'
    import sys
    import boto3

    s3 = boto3.client("s3")
    for line in sys.stdin:
    \tline = line.strip().split("\\t")
    \ts3.delete_object(Bucket=sys.argv[1], Key=line[0], VersionId=line[1])
    ' "$bucket"
    }; f

.edit-secret = !:;f() ( # secretsmanager get-secret-value --secret-id
    set -eu -o pipefail
    name="$1"
    content=
    tmpdir="$(mktemp -d)"
    trap 'rm -rf -- "$tmpdir"' EXIT

    filename="$tmpdir/$(<<<"$name" jq -s -R -r @uri)"
    if aws secretsmanager list-secrets | jq -r '.SecretList[].Name' | grep -Fqx "$name"; then
        content="$(aws secretsmanager get-secret-value --secret-id "$name" | jq -re .SecretString)"
        printf %s "$content" > "$filename"
        put_args=( put-secret-value --secret-id "$name" )
    else
        put_args=( create-secret --name "$name" )
    fi

    "${EDITOR:-vi}" "$filename"
    if diff -q "$filename" <(printf %s "$content"); then
        echo 'File not modified' >&2
        exit 2
    fi

    aws secretsmanager "${put_args[@]}" --secret-string "file://$filename"

    ); f

.edit-ssm-param = !:;f() ( # ssm get-parameter --name
    set -eu -o pipefail
    name="$1"
    content=
    tmpdir="$(mktemp -d)"
    trap 'rm -rf -- "$tmpdir"' EXIT

    filename="$tmpdir/$(<<<"$name" jq -s -R -r @uri)"
    type=String
    if param="$(aws ssm get-parameters --names "$name" | jq -re '.Parameters[0]')"; then
        content="$(<<<"$param" jq -r .Value)"
        printf %s "$content" >"$filename"
        type="$(<<<"$param" jq -r .Type)"
    fi

    "${EDITOR:-vi}" "$filename"
    if diff -q "$filename" <(printf %s "$content"); then
        echo 'File not modified' >&2
        exit 2
    fi

    aws ssm put-parameter --name "$name" --type "$type" --value "file://$filename" --overwrite

    ); f

.edit-s3 = !:;f() ( # aws s3 ls
    set -eu -o pipefail
    name="$1"
    content=
    tmpdir="$(mktemp -d)"
    trap 'rm -rf -- "$tmpdir"' EXIT

    filename="$tmpdir/$(<<<"$name" jq -s -R -r @uri)"
    aws s3 cp "$name" "$filename" || true

    content="$(cat "$filename")"
    "${EDITOR:-vi}" "$filename"
    if diff -q "$filename" <(printf %s "$content"); then
        echo 'File not modified' >&2
        exit 2
    fi

    aws s3 cp "$filename" "$name"

    ); f

.nacls = !:;f() { # ec2 describe-network-acls
    aws ec2 describe-network-acls "$@" \
    | jq -r '.NetworkAcls[] | [.NetworkAclId] + (.Entries[] | [(if .Egress then "egress" else "ingress" end), .Protocol, .RuleAction, .CidrBlock, .PortRange.From//1, .PortRange.To//65535]) + [(.Tags//[]) | from_entries.Name] | @tsv'
    }; f

.import-keypair = !:;f() {
    name="${1-"$USER"-keypair}"
    key="${2-"$HOME"/.ssh/id_rsa.pub}"
    aws ec2 import-key-pair --key-name "$name" --public-key-material "$(cat "$key" | base64)"
    }; f
